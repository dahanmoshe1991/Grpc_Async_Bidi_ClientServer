// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: BaseGRpcServer.proto

#include "BaseGRpcServer.pb.h"
#include "BaseGRpcServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace BaseGRpc {

static const char* BaseGRpcServer_method_names[] = {
  "/BaseGRpc.BaseGRpcServer/Handshake",
  "/BaseGRpc.BaseGRpcServer/SayHello",
  "/BaseGRpc.BaseGRpcServer/clientStream",
  "/BaseGRpc.BaseGRpcServer/serverStream",
  "/BaseGRpc.BaseGRpcServer/BidiStream",
};

std::unique_ptr< BaseGRpcServer::Stub> BaseGRpcServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BaseGRpcServer::Stub> stub(new BaseGRpcServer::Stub(channel));
  return stub;
}

BaseGRpcServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Handshake_(BaseGRpcServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHello_(BaseGRpcServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clientStream_(BaseGRpcServer_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_serverStream_(BaseGRpcServer_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BidiStream_(BaseGRpcServer_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status BaseGRpcServer::Stub::Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::BaseGRpc::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Handshake_, context, request, response);
}

void BaseGRpcServer::Stub::experimental_async::Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, std::move(f));
}

void BaseGRpcServer::Stub::experimental_async::Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>* BaseGRpcServer::Stub::PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Handshake_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>* BaseGRpcServer::Stub::AsyncHandshakeRaw(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandshakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BaseGRpcServer::Stub::SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::BaseGRpc::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void BaseGRpcServer::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void BaseGRpcServer::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>* BaseGRpcServer::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BaseGRpc::HelloReply, ::BaseGRpc::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>* BaseGRpcServer::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::BaseGRpc::IntMessage>* BaseGRpcServer::Stub::clientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response) {
  return ::grpc::internal::ClientWriterFactory< ::BaseGRpc::IntMessage>::Create(channel_.get(), rpcmethod_clientStream_, context, response);
}

void BaseGRpcServer::Stub::experimental_async::clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::experimental::ClientWriteReactor< ::BaseGRpc::IntMessage>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::BaseGRpc::IntMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_clientStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>* BaseGRpcServer::Stub::AsyncclientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::BaseGRpc::IntMessage>::Create(channel_.get(), cq, rpcmethod_clientStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>* BaseGRpcServer::Stub::PrepareAsyncclientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::BaseGRpc::IntMessage>::Create(channel_.get(), cq, rpcmethod_clientStream_, context, response, false, nullptr);
}

::grpc::ClientReader< ::BaseGRpc::BoolMessage>* BaseGRpcServer::Stub::serverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::BaseGRpc::BoolMessage>::Create(channel_.get(), rpcmethod_serverStream_, context, request);
}

void BaseGRpcServer::Stub::experimental_async::serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::experimental::ClientReadReactor< ::BaseGRpc::BoolMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::BaseGRpc::BoolMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_serverStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>* BaseGRpcServer::Stub::AsyncserverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::BaseGRpc::BoolMessage>::Create(channel_.get(), cq, rpcmethod_serverStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>* BaseGRpcServer::Stub::PrepareAsyncserverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::BaseGRpc::BoolMessage>::Create(channel_.get(), cq, rpcmethod_serverStream_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BaseGRpcServer::Stub::BidiStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>::Create(channel_.get(), rpcmethod_BidiStream_, context);
}

void BaseGRpcServer::Stub::experimental_async::BidiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::BaseGRpc::IntMessage,::BaseGRpc::BoolMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::BaseGRpc::IntMessage,::BaseGRpc::BoolMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_BidiStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BaseGRpcServer::Stub::AsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>::Create(channel_.get(), cq, rpcmethod_BidiStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BaseGRpcServer::Stub::PrepareAsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>::Create(channel_.get(), cq, rpcmethod_BidiStream_, context, false, nullptr);
}

BaseGRpcServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseGRpcServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseGRpcServer::Service, ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BaseGRpcServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BaseGRpc::VoidMessage* req,
             ::BaseGRpc::VoidMessage* resp) {
               return service->Handshake(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseGRpcServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseGRpcServer::Service, ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BaseGRpcServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BaseGRpc::HelloRequest* req,
             ::BaseGRpc::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseGRpcServer_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< BaseGRpcServer::Service, ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>(
          [](BaseGRpcServer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::BaseGRpc::IntMessage>* reader,
             ::BaseGRpc::BoolMessage* resp) {
               return service->clientStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseGRpcServer_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BaseGRpcServer::Service, ::BaseGRpc::BoolMessage, ::BaseGRpc::BoolMessage>(
          [](BaseGRpcServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BaseGRpc::BoolMessage* req,
             ::grpc::ServerWriter<::BaseGRpc::BoolMessage>* writer) {
               return service->serverStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseGRpcServer_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BaseGRpcServer::Service, ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>(
          [](BaseGRpcServer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::BaseGRpc::BoolMessage,
             ::BaseGRpc::IntMessage>* stream) {
               return service->BidiStream(ctx, stream);
             }, this)));
}

BaseGRpcServer::Service::~Service() {
}

::grpc::Status BaseGRpcServer::Service::Handshake(::grpc::ServerContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseGRpcServer::Service::SayHello(::grpc::ServerContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseGRpcServer::Service::clientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* reader, ::BaseGRpc::BoolMessage* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseGRpcServer::Service::serverStream(::grpc::ServerContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseGRpcServer::Service::BidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace BaseGRpc

