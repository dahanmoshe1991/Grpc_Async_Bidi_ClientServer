// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: BaseGRpcServer.proto
#ifndef GRPC_BaseGRpcServer_2eproto__INCLUDED
#define GRPC_BaseGRpcServer_2eproto__INCLUDED

#include "BaseGRpcServer.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace BaseGRpc {

// The GcRpc service definition.
class BaseGRpcServer final {
 public:
  static constexpr char const* service_full_name() {
    return "BaseGRpc.BaseGRpcServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::BaseGRpc::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::VoidMessage>> AsyncHandshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::VoidMessage>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::VoidMessage>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::VoidMessage>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::BaseGRpc::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::BaseGRpc::IntMessage>> clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::BaseGRpc::IntMessage>>(clientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::BaseGRpc::IntMessage>> AsyncclientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::BaseGRpc::IntMessage>>(AsyncclientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::BaseGRpc::IntMessage>> PrepareAsyncclientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::BaseGRpc::IntMessage>>(PrepareAsyncclientStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::BaseGRpc::BoolMessage>> serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::BaseGRpc::BoolMessage>>(serverStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BaseGRpc::BoolMessage>> AsyncserverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BaseGRpc::BoolMessage>>(AsyncserverStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BaseGRpc::BoolMessage>> PrepareAsyncserverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BaseGRpc::BoolMessage>>(PrepareAsyncserverStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>> BidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>>(BidiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>> AsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>>(AsyncBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>> PrepareAsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>>(PrepareAsyncBidiStreamRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::ClientWriteReactor< ::BaseGRpc::IntMessage>* reactor) = 0;
      #else
      virtual void clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::experimental::ClientWriteReactor< ::BaseGRpc::IntMessage>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::ClientReadReactor< ::BaseGRpc::BoolMessage>* reactor) = 0;
      #else
      virtual void serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::experimental::ClientReadReactor< ::BaseGRpc::BoolMessage>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::BaseGRpc::IntMessage,::BaseGRpc::BoolMessage>* reactor) = 0;
      #else
      virtual void BidiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::BaseGRpc::IntMessage,::BaseGRpc::BoolMessage>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::VoidMessage>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::VoidMessage>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseGRpc::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::BaseGRpc::IntMessage>* clientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::BaseGRpc::IntMessage>* AsyncclientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::BaseGRpc::IntMessage>* PrepareAsyncclientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::BaseGRpc::BoolMessage>* serverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::BaseGRpc::BoolMessage>* AsyncserverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::BaseGRpc::BoolMessage>* PrepareAsyncserverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BidiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* AsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* PrepareAsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::BaseGRpc::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>> AsyncHandshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>>(AsyncHandshakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>> PrepareAsyncHandshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>>(PrepareAsyncHandshakeRaw(context, request, cq));
    }
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::BaseGRpc::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::BaseGRpc::IntMessage>> clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::BaseGRpc::IntMessage>>(clientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>> AsyncclientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>>(AsyncclientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>> PrepareAsyncclientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>>(PrepareAsyncclientStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::BaseGRpc::BoolMessage>> serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::BaseGRpc::BoolMessage>>(serverStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>> AsyncserverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>>(AsyncserverStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>> PrepareAsyncserverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>>(PrepareAsyncserverStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>> BidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>>(BidiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>> AsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>>(AsyncBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>> PrepareAsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>>(PrepareAsyncBidiStreamRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Handshake(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SayHello(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::ClientWriteReactor< ::BaseGRpc::IntMessage>* reactor) override;
      #else
      void clientStream(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::experimental::ClientWriteReactor< ::BaseGRpc::IntMessage>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::ClientReadReactor< ::BaseGRpc::BoolMessage>* reactor) override;
      #else
      void serverStream(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::experimental::ClientReadReactor< ::BaseGRpc::BoolMessage>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::BaseGRpc::IntMessage,::BaseGRpc::BoolMessage>* reactor) override;
      #else
      void BidiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::BaseGRpc::IntMessage,::BaseGRpc::BoolMessage>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>* AsyncHandshakeRaw(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BaseGRpc::VoidMessage>* PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::BaseGRpc::VoidMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BaseGRpc::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::BaseGRpc::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::BaseGRpc::IntMessage>* clientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response) override;
    ::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>* AsyncclientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::BaseGRpc::IntMessage>* PrepareAsyncclientStreamRaw(::grpc::ClientContext* context, ::BaseGRpc::BoolMessage* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::BaseGRpc::BoolMessage>* serverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request) override;
    ::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>* AsyncserverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::BaseGRpc::BoolMessage>* PrepareAsyncserverStreamRaw(::grpc::ClientContext* context, const ::BaseGRpc::BoolMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BidiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* AsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* PrepareAsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Handshake_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_clientStream_;
    const ::grpc::internal::RpcMethod rpcmethod_serverStream_;
    const ::grpc::internal::RpcMethod rpcmethod_BidiStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Handshake(::grpc::ServerContext* context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response);
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response);
    virtual ::grpc::Status clientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* reader, ::BaseGRpc::BoolMessage* response);
    virtual ::grpc::Status serverStream(::grpc::ServerContext* context, const ::BaseGRpc::BoolMessage* request, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* writer);
    virtual ::grpc::Status BidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Handshake() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::BaseGRpc::VoidMessage* request, ::grpc::ServerAsyncResponseWriter< ::BaseGRpc::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::BaseGRpc::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::BaseGRpc::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clientStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_clientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* /*reader*/, ::BaseGRpc::BoolMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_serverStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_serverStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_serverStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status serverStream(::grpc::ServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestserverStream(::grpc::ServerContext* context, ::BaseGRpc::BoolMessage* request, ::grpc::ServerAsyncWriter< ::BaseGRpc::BoolMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidiStream() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Handshake<WithAsyncMethod_SayHello<WithAsyncMethod_clientStream<WithAsyncMethod_serverStream<WithAsyncMethod_BidiStream<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Handshake() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::BaseGRpc::VoidMessage* request, ::BaseGRpc::VoidMessage* response) { return this->Handshake(context, request, response); }));}
    void SetMessageAllocatorFor_Handshake(
        ::grpc::experimental::MessageAllocator< ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Handshake(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::BaseGRpc::HelloRequest* request, ::BaseGRpc::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::experimental::MessageAllocator< ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SayHello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_clientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_clientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::BaseGRpc::BoolMessage* response) { return this->clientStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_clientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* /*reader*/, ::BaseGRpc::BoolMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::BaseGRpc::IntMessage>* clientStream(
      ::grpc::CallbackServerContext* /*context*/, ::BaseGRpc::BoolMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::BaseGRpc::IntMessage>* clientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::BaseGRpc::BoolMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_serverStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_serverStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::BaseGRpc::BoolMessage, ::BaseGRpc::BoolMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::BaseGRpc::BoolMessage* request) { return this->serverStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_serverStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status serverStream(::grpc::ServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::BaseGRpc::BoolMessage>* serverStream(
      ::grpc::CallbackServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::BaseGRpc::BoolMessage>* serverStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BidiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BidiStream(context); }));
    }
    ~ExperimentalWithCallbackMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BidiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::BaseGRpc::IntMessage, ::BaseGRpc::BoolMessage>* BidiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Handshake<ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_clientStream<ExperimentalWithCallbackMethod_serverStream<ExperimentalWithCallbackMethod_BidiStream<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Handshake<ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_clientStream<ExperimentalWithCallbackMethod_serverStream<ExperimentalWithCallbackMethod_BidiStream<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Handshake() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clientStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_clientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* /*reader*/, ::BaseGRpc::BoolMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_serverStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_serverStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_serverStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status serverStream(::grpc::ServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidiStream() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Handshake() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandshake(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clientStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_clientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* /*reader*/, ::BaseGRpc::BoolMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_serverStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_serverStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_serverStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status serverStream(::grpc::ServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestserverStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidiStream() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Handshake() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Handshake(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Handshake(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Handshake(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SayHello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_clientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_clientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->clientStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_clientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::BaseGRpc::IntMessage>* /*reader*/, ::BaseGRpc::BoolMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* clientStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* clientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_serverStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_serverStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->serverStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_serverStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status serverStream(::grpc::ServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* serverStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* serverStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BidiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BidiStream(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::BaseGRpc::BoolMessage, ::BaseGRpc::IntMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Handshake : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Handshake() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::BaseGRpc::VoidMessage, ::BaseGRpc::VoidMessage>* streamer) {
                       return this->StreamedHandshake(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Handshake() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Handshake(::grpc::ServerContext* /*context*/, const ::BaseGRpc::VoidMessage* /*request*/, ::BaseGRpc::VoidMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandshake(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::BaseGRpc::VoidMessage,::BaseGRpc::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::BaseGRpc::HelloRequest, ::BaseGRpc::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::BaseGRpc::HelloRequest* /*request*/, ::BaseGRpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::BaseGRpc::HelloRequest,::BaseGRpc::HelloReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_SayHello<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_serverStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_serverStream() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::BaseGRpc::BoolMessage, ::BaseGRpc::BoolMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::BaseGRpc::BoolMessage, ::BaseGRpc::BoolMessage>* streamer) {
                       return this->StreamedserverStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_serverStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status serverStream(::grpc::ServerContext* /*context*/, const ::BaseGRpc::BoolMessage* /*request*/, ::grpc::ServerWriter< ::BaseGRpc::BoolMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedserverStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::BaseGRpc::BoolMessage,::BaseGRpc::BoolMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_serverStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Handshake<WithStreamedUnaryMethod_SayHello<WithSplitStreamingMethod_serverStream<Service > > > StreamedService;
};

}  // namespace BaseGRpc


#endif  // GRPC_BaseGRpcServer_2eproto__INCLUDED
